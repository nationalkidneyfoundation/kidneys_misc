<?php

/**
 * Merge values from contacts into master contact and handle related entities.
 *
 * @param RedhenContact $master
 *   The master RedHen Contact.
 * @param RedhenContact dupe
 *   The contact being merged into the master.
 * @return bool
 *   Result of the merge attempt.
 */
function kidneys_misc_reassign_contact_donation_membership(RedhenContact $master, RedhenContact $dupe, $delete_dupe = true) {
  $master_wrapper = entity_metadata_wrapper('redhen_contact', $master);
  $master_id = $master_wrapper->getIdentifier();

  $transaction = db_transaction();
  try {
    // Iterate through all contacts and update or delete related entities.
    $dupe_id = $dupe->internalIdentifier();

    $types = array('redhen_membership', 'redhen_donation');

    foreach ($types as $entity_type) {
      // Update related Memberships.
      $entity_key = ($entity_type == 'redhen_donation') ? 'contact_id' : 'entity_id';
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', $entity_type);
      if ($entity_type == 'redhen_membership') {
        $query->propertyCondition('entity_type', 'redhen_contact');
      }
      $query->propertyCondition($entity_key, $dupe_id);
      $result = $query->execute();
      if (!empty($result)) {
        $rel_entities = entity_load($entity_type, array_keys($result[$entity_type]));
        // Determine the property to change.
        foreach ($rel_entities as $rel_entity) {
          $rel_entity->{$entity_key} = $master_id;
          $rel_entity->save();
        }
      }
    }

    // Delete old contacts.
    if($delete_dupe){
      redhen_contact_delete_multiple(array($dupe_id => $dupe_id));
    }

    $master_wrapper->save();

    return TRUE;
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('kidney_misc_merge_records', $e);
    return FALSE;
  }
}


/**
 * Implements hook_menu().
 */
function nkf_misc_menu() {
  // A redirect page for facebook shares that require it.
  $items['nkf-share-complete'] = array(
    'title' => 'Thank you for sharing',
    'page callback' => 'nkf_misc_share_redirect',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


function kidneys_misc_get_category_tid_values($node) {
  $return = '';
  if (isset($node->field_base_category)) {

    $multiple = 3;
    foreach ($node->field_base_category[LANGUAGE_NONE] as $i => $value) {
      $return .= str_repeat('<<' . $value['tid'] . '>> ', ($i >= $multiple) ? 1 : $multiple - $i);
    }
  }
  return $return;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function kidneys_misc_block_info() {
  $blocks['kidneys_misc_content_actions_top'] = array(
    // info: The name of the block.
    'info' => t('Content Actions Top'),
  );
  return $blocks;
}
/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function kidneys_misc_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  $block = array();
  switch ($delta) {
    case 'kidneys_misc_content_actions_top':
      $block['subject'] = '';
      $block['content'] = kidneys_misc_get_content_actions_top_markup();
    break;

  }
  return $block;
}
function kidneys_misc_get_content_actions() {
  $node = menu_get_object();
  if (!$node || !isset($node->nid)) {
    return '';
  }
  $actions = array();
  $title = rawurlencode($node->title);
  //$teaser = field_view_field('node', $node, 'body', array(
  //    'label'=> 'hidden',
  //    'type' => 'text_summary_or_trimmed',
  //    'settings'=> array('trim_length' => 200),
  //  ));
  //$teaser = rawurlencode(strip_tags(render($teaser), '<p><a>'));
  $base_path = url(base_path(), ['absolute' => TRUE]);
  $path = $base_path . '/' . drupal_get_path_alias('node/' . $node->nid);
  // Shared from National Kidney Foundation.
  // Read more
  // National Kidney Foundation
  $teaser = '<p>Here is an article from National Kidney Foundation you might be interested in:</p>';
  // add UTMs
  //$teaser .= '<p><a href="' . $path . '">' . $title . '</a></p>';
  $teaser .= '<p>'. $path . '</p>';
  $teaser = rawurlencode($teaser);
  if ($twitter = field_get_items('node', $node, 'field_action_tweet')) {
    if ($twitter[0]['value']) {
      $actions['tweet'] = array(
        'icon' => 'icon-twitter',
        'markup' => '<a data-track="social" data-network="twitter" data-action="share" data-target="'.urlencode($path).'" href="' . kidneys_misc_get_tweet_intent($node) . '" class="caps button--twitter js--share-link"><i class="icon-twitter"></i> <span class="display--none sm--display--inline">Tweet</span></a>'
      );
    }
  }
  if ($facebook = field_get_items('node', $node, 'field_action_facebook')) {
    if ($facebook[0]['value']) {
      $actions['facebook'] = array(
        'icon' => 'icon-facebook',
        'markup' => '<a data-track="social" data-network="facebook" data-action="share" data-target="'.urlencode($path).'" href="https://www.facebook.com/sharer/sharer.php?u=' . urlencode($path) . '" class="caps button--facebook js--share-link"><i class="icon-facebook"></i> <span class="display--none sm--display--inline">Share</span></a>'
      );
    }
  }
  if ($print = field_get_items('node', $node, 'field_action_print')) {
    if ($print[0]['value']) {
      $actions['print'] = array(
        'icon' => 'icon-print',
        'markup' => '<a data-track="event" data-category="cta" data-action="print" data-label="'.urlencode($path).'" href="#" class="caps button--gray-4 js--print-link"><i class="icon-print"></i> <span class="display--none sm--display--inline">Print</span></a>'
      );
    }
  }
  if ($email = field_get_items('node', $node, 'field_action_email')) {
    if ($email[0]['value']) {
      //module_load_include('inc', 'print_mail', 'print_mail');
      //$email_form = drupal_render(drupal_get_form('print_mail_form'));
      $actions['email'] = array(
        'icon' => 'icon-mail-alt',
        'markup' => '<a data-track="event" data-category="cta" data-action="email" data-label="'.urlencode($path).'" href="mailto:?subject=Shared%20from%20National%20Kidney%20Foundation&body=' . $teaser . '" class="caps button--gray-4"><i class="icon-mail-alt"></i> <span class="display--none sm--display--inline">Email</span></a>'
        //'markup' => '<a href="/printmail/' . $node->nid . '" class="caps button--gray-4"><i class="icon-mail-alt"></i> Email</a>'
        //'markup' => '<a href="#email" class="modal-trigger caps button--gray-4"><i class="icon-mail-alt"></i> Email</a>
        //  <div id="email" class="modal padding--xl bg--white border-radius--md max-width--xxl center mfp-hide">'.$email_form.'</div>'
      );
    }
  }
  return $actions;
}

function kidneys_misc_get_tweet_intent($node) {
  $text = kidney_misc_get_first_field_value($node, 'field_tweet_text');
  $via = kidney_misc_get_first_field_value($node, 'field_tweet_via');
  $hashtags = kidney_misc_get_first_field_value($node, 'field_tweet_hashtag');
  $url = kidney_misc_get_first_field_value($node, 'field_url_hash');
  $tweet = 'https://twitter.com/intent/tweet';
  $query['text'] = ($text) ? $text : $node->title;
  if ($url) {
    $query['url'] = 'http://nkf.li/' . $url;
  } else {
    $base_path = url(base_path(), ['absolute' => TRUE]);
    $path = $base_path . '/' . drupal_get_path_alias('node/' . $node->nid);
    $query['url'] = $path;
  }
  if ($via) {
    $query['via'] = $via;
  }
  if ($hashtags) {
    $query['hashtags'] = $hashtags;
  }
  return url($tweet, array('query' => $query));
}

function kidney_misc_get_first_field_value($node, $field) {
  $field_items = field_get_items('node', $node, $field);
  if ($field_items) {
    $field_first_item = reset($field_items);
    $field_value = $field_first_item['value'];
    return $field_value;
  }
  return FALSE;
}


function kidneys_misc_get_content_actions_top_markup() {
  $markup = '';
  $actions = kidneys_misc_get_content_actions();
  if (!empty($actions)) {
    $markup = '<div class="sm--display--inline-block padding-y--md grid print--hide sm--font-size--sm">';
    foreach ($actions as $key => $value) {
      $markup .= '<div class="grid-cell padding-right--xs">';
      $markup .= $value['markup'];
      $markup .= '</div>';
    }
    $markup .= '</div>';
  }
  return $markup;
}



/**
 * Returns an empty page with javascript that closes the current window.
 * Used as the redirect page for facebook shares that require a redirect uri.
 * Allows us to close the share popup window when the user has finished sharing.
 */
function nkf_misc_share_redirect() {
  return "<script>(function(){ window.close(); })();</script>";
}

function kidneys_misc_create_redirect($s, $r) {
  if (module_exists('redirect')) {

    $redirect = new stdClass();
    redirect_object_prepare($redirect);
    $redirect->source = $s;
    $redirect->redirect = $r;

    // Check if the redirect exists before saving.
    $hash = redirect_hash($redirect);
    $existing = redirect_load_by_hash($hash);
    if (!$existing) {
      redirect_save($redirect);
    }

  }
}

function nkf_misc_generate_hash($length = 7) {
  if (module_exists('redirect')) {
    do {
      $hash = user_password($length);
    } while (redirect_load_by_source($hash) !== FALSE);

    return $hash;
  }
  return FALSE;

}
