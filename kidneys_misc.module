<?php

/**
 * Implements hook_form_alter
 */
function kidneys_misc_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'iga_entityform_edit_form') {
    //dpm($form);
    $form['actions']['#prefix'] = '<div class="">';
    $form['actions']['#suffix'] = '</div>';

    // Address hacking.
    $form['field_base_address'][LANGUAGE_NONE][0]['#type'] = 'container';
    $form['field_base_address'][LANGUAGE_NONE][0]['#attributes']['class'][] = 'grid';
    $form['field_base_address'][LANGUAGE_NONE][0]['country']['#access'] = FALSE;
    $form['field_base_address'][LANGUAGE_NONE][0]['street_block']['thoroughfare']['#prefix'] = '<div class="grid-cell width--100">';
    $form['field_base_address'][LANGUAGE_NONE][0]['street_block']['thoroughfare']['#suffix'] = '</div>';
    $form['field_base_address'][LANGUAGE_NONE][0]['locality_block']['locality']['#prefix'] = '<div class="grid-cell width--100 sm--width--55 sm--padding-right--xxs">';
    $form['field_base_address'][LANGUAGE_NONE][0]['locality_block']['locality']['#suffix'] = '</div>';
    $form['field_base_address'][LANGUAGE_NONE][0]['locality_block']['administrative_area']['#prefix'] = '<div class="grid-cell width--50 sm--width--20 padding-right--xxs">';
    $form['field_base_address'][LANGUAGE_NONE][0]['locality_block']['administrative_area']['#suffix'] = '</div>';
    $form['field_base_address'][LANGUAGE_NONE][0]['locality_block']['postal_code']['#prefix'] = '<div class="grid-cell width--50 sm--width--25">';
    $form['field_base_address'][LANGUAGE_NONE][0]['locality_block']['postal_code']['#suffix'] = '</div>';

    // Name hacking.
    $form['name'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('grid')),
      '#weight' => $form['field_base_first_name']['#weight']
    );
    $form['field_base_first_name']['#attributes']['class'][] = 'grid-cell width--100 sm--width--50 sm--padding-right--xxs';
    $form['field_base_last_name']['#attributes']['class'][] = 'grid-cell width--100 sm--width--50 sm--padding-left--xxs';
    $form['name']['field_base_first_name'] = $form['field_base_first_name'];
    $form['name']['field_base_last_name'] = $form['field_base_last_name'];
    unset($form['field_base_first_name']);
    unset($form['field_base_last_name']);

    // Phone/email hacking.
    $form['email_phone'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('grid')),
      '#weight' => $form['field_base_email']['#weight']
    );
    $form['field_base_email']['#attributes']['class'][] = 'grid-cell width--100 sm--width--50 padding-right--xxs';
    $form['field_phone']['#attributes']['class'][] = 'grid-cell width--100 sm--width--50 sm--padding-left--xxs';
    $form['email_phone']['field_base_email'] = $form['field_base_email'];
    $form['email_phone']['field_phone'] = $form['field_phone'];
    unset($form['field_base_email']);
    unset($form['field_phone']);

    $form['#group_children']['name'] = $form['#group_children']['field_base_first_name'];
    $form['#group_children']['email_phone'] = $form['#group_children']['field_base_email'];

    $form['actions']['submit']['#attributes']['class'][] = 'width--100 button--yellow caps bold';
    $form['actions']['#prefix'] = '<div class="sm--hide">';
    $form['actions']['#suffic'] = '</div>';

    $form['#prefix'] = '<div class="center width--100">';
    $form['#prefix'] .= '<div class="sm--padding-x--xxl padding-x--md padding-top--md bg--white border-width--none border-top-width--xl border-color--gray-4 border-style--solid">';
    $form['#suffix'] = '</div></div>';
  }
}

/*
 * Implements hook_entityform_insert
 */
function kidneys_misc_entityform_insert($entityform) {
  //dpm($entityform);
  // Get values from submission.
  $age = $entityform->field_iga_18[LANGUAGE_NONE][0]['value'];
  $cancer = $entityform->field_iga_cancer[LANGUAGE_NONE][0]['value'];
  $transplant = $entityform->field_iga_transplant[LANGUAGE_NONE][0]['value'];
  $diagnosis = $entityform->field_iga_diagnosis[LANGUAGE_NONE][0]['value'];
  $end_stage = $entityform->field_iga_end_stage[LANGUAGE_NONE][0]['value'];
  $biopsy = $entityform->field_iga_biopsy[LANGUAGE_NONE][0]['value'];

  $city = $entityform->field_base_address[LANGUAGE_NONE][0]['locality'];
  $state = $entityform->field_base_address[LANGUAGE_NONE][0]['administrative_area'];
  $zip = $entityform->field_base_address[LANGUAGE_NONE][0]['postal_code'];
  $address = $city . ' ' . $state . ' ' . $zip;

  if ($age && $diagnosis && $biopsy && !$cancer && !$transplant && !$end_stage) {
    // Find a lat and lon
    $point = geocoder('google', $address);
    if (!empty($point)) {
      $lon = $point->coords[0];
      $lat = $point->coords[1];
      $arg = $lat . ',' . $lon;
      // Use view to look up location, this makes it easy to adjust in UI.
      $result = views_get_view_result('clinical_trials_locator', 'default', $arg);
      if (!empty($result)) {
        // If we have a location, save it to the submission for future reference.
        // Maybe we should be doing this in presave as opposed to insert?
        $location = $result[0]->nid;
        $submission = entity_load_single('entityform', $entityform->entityform_id);
        $submission_wrapper = entity_metadata_wrapper('entityform', $submission);
        $submission_wrapper->field_iga_closest_center->set($location);
        $submission_wrapper->save();
      }
    }
  }

  drupal_goto('iga-trial/results/' . $entityform->entityform_id);

}

function kidneys_misc_views_pre_render ( &$view ) {
  // Add Adroll advanced tracking values if we are on the donation receipt page.
  if (arg(0) == 'donation-receipt'
      && variable_get('nkf_adroll_endabled', 0)
      && $view->name == 'donation_receipt_v2'
      && !empty($view->result[0])
      && !empty($view->result[0]->_field_data['donation_id'])) {
    $result = $view->result[0];
    $donation = $result->_field_data['donation_id']['entity'];
    $order_id = $donation->order_id;
    $wrapper = entity_metadata_wrapper('commerce_order', $order_id);
    $order_total = $wrapper->commerce_order_total->value();
    $amount = commerce_currency_amount_to_decimal($order_total['amount'], $order_total['currency_code']);
    $currency = commerce_currency_load($order_total['currency_code']);
    $order_total = number_format(commerce_currency_round($amount, $currency), $currency['decimals'], $currency['decimal_separator'],$currency['thousands_separator']);
    drupal_add_js('adroll_conversion_value = ' . $order_total . ';adroll_currency = "' . $currency['code'] . '";', array(
      'type' => 'inline',
      'scope' => 'footer',
      'weight' => 5,
    ));
  }
}


/**
 * Merge values from contacts into master contact and handle related entities.
 *
 * @param RedhenContact $master
 *   The master RedHen Contact.
 * @param RedhenContact dupe
 *   The contact being merged into the master.
 * @return bool
 *   Result of the merge attempt.
 */
function kidneys_misc_reassign_contact_donation_membership(RedhenContact $master, RedhenContact $dupe, $delete_dupe = true) {
  $master_wrapper = entity_metadata_wrapper('redhen_contact', $master);
  $master_id = $master_wrapper->getIdentifier();

  $transaction = db_transaction();
  try {
    // Iterate through all contacts and update or delete related entities.
    $dupe_id = $dupe->internalIdentifier();

    $types = array('redhen_membership', 'redhen_donation');

    foreach ($types as $entity_type) {
      // Update related Memberships.
      $entity_key = ($entity_type == 'redhen_donation') ? 'contact_id' : 'entity_id';
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', $entity_type);
      if ($entity_type == 'redhen_membership') {
        $query->propertyCondition('entity_type', 'redhen_contact');
      }
      $query->propertyCondition($entity_key, $dupe_id);
      $result = $query->execute();
      if (!empty($result)) {
        $rel_entities = entity_load($entity_type, array_keys($result[$entity_type]));
        // Determine the property to change.
        foreach ($rel_entities as $rel_entity) {
          $rel_entity->{$entity_key} = $master_id;
          $rel_entity->save();
        }
      }
    }

    // Delete old contacts.
    if($delete_dupe){
      redhen_contact_delete_multiple(array($dupe_id => $dupe_id));
    }

    $master_wrapper->save();

    return TRUE;
  }
  catch (Exception $e) {
    $transaction->rollback();
    return FALSE;
  }
}


/**
 * Implements hook_menu().
 */
function kidneys_misc_menu() {
  // A redirect page for facebook shares that require it.
  $items['nkf-share-complete'] = array(
    'title' => 'Thank you for sharing',
    'page callback' => 'kidneys_misc_share_redirect',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['nkf-promotion'] = array(
    'title' => 'Ajax endpoint for dynamic promos',
    'page callback' => 'kidneys_misc_promotion_generator',
    'access arguments' => array('access content'),
    'page_arguments' => array(1, 2),
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/services/adroll'] = array(
    'title' => 'Adroll configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kidneys_misc_adroll_admin_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['nkf-download/file/fid/%file'] = array(
    'title' => 'Download file',
    'page callback' => 'nkf_misc_download_file_direct_download',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * .
 *
 * @param stdClass $file
 * @return int|null
 */
function nkf_misc_download_file_direct_download(stdClass $file) {
  $headers = file_download_headers($file->uri);

  if (!$headers) {
    return MENU_ACCESS_DENIED;
  }

  $default_headers = array(
    'Content-Type' => 'force-download',
    'Content-Disposition' => 'attachment; filename="' . $file->filename . '"',
    'Content-Length' => $file->filesize,
    'Content-Transfer-Encoding' => 'binary',
    'Pragma' => 'no-cache',
    'Cache-Control' => 'must-revalidate, post-check=0, pre-check=0',
    'Expires' => '0',
    'Accept-Ranges' => 'bytes'
  );

  $headers = array_merge($default_headers, $headers);
  file_transfer($file->uri, $headers);
}

function kidneys_misc_adroll_admin_form($form, &$form_state) {

  $form['nkf_adroll_endabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Adroll Tracking'),
    '#default_value' => variable_get('nkf_adroll_endabled', 0)
  );

  $form['nkf_adroll_adv_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Adroll Adv ID'),
    '#required' => TRUE,
    '#default_value' => variable_get('nkf_adroll_adv_id', '')
  );

  $form['nkf_adroll_pix_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Adroll Pix ID'),
    '#required' => TRUE,
    '#default_value' => variable_get('nkf_adroll_pix_id', '')
  );

  return system_settings_form($form);
}

/**
 * Geolocate from IP address.
 *
 * @param String $ip
 *   The master RedHen Contact.
 * @return Object
 *   Object with lon and lat.
 */
function kidneys_misc_get_geo_from_ip($ip) {
  // Turn this off for now.
  return FALSE;
  $data = &drupal_static(__FUNCTION__ . $ip, FALSE);
  if(empty($data)) {
    $url = 'https://freegeoip.net/json/'. $ip;
    $response = drupal_http_request($url, array('timeout' => 3));
    $data = drupal_json_decode($response->data);
  }
  return $data;
}

/**
 * Find promo with related event based on proximity.
 *
 * @param Double $lat
 *   Latitude.
 * @param Double $lon
 *   Longitude.
 * @param String $field
 *   The promo field we want to render.
 * @param Int $dis
 *   Radius for search.
 * @param Int $days
 *   Max days until event..
 * @return Object
 *   Object with nid and distance.
 */
function kidneys_misc_get_proximate_promo_events($lat, $lon, $field, $dis = 50, $days = 45) {
  $results = db_query(
    'SELECT
      n.nid,  (
        3959 * acos (
          cos ( radians(:lat) )
          * cos( radians( g.field_base_geofield_lat ) )
          * cos( radians( g.field_base_geofield_lon ) - radians(:lon) )
          + sin ( radians(:lat) )
          * sin( radians( g.field_base_geofield_lat ) )
        )
      ) AS distance
    FROM {node} n
      INNER JOIN {field_data_field_base_related_entity} r on r.entity_id = n.nid
      INNER JOIN {field_data_field_base_geofield} g on g.entity_id = r.field_base_related_entity_target_id
      INNER JOIN {field_data_field_base_date_time} d on d.entity_id = r.field_base_related_entity_target_id
      INNER JOIN {field_data_field_promo_' . $field . '} f on f.entity_id = n.nid

    WHERE
      n.type = :type
      AND d.field_base_date_time_value >= NOW()
      AND d.field_base_date_time_value <= DATE_ADD(CURRENT_TIMESTAMP, INTERVAL :days day)
    HAVING distance < :dis
    ORDER BY distance
    LIMIT 0 , 1', array(':type'=> 'promotion', ':lat' => $lat, ':lon' => $lon, ':dis' => $dis, ':days' => $days )
  );
  if ($results->rowCount() > 0) {
    return $results->fetchObject();
  } else {
    return FALSE;
  }
}

/**
 * Return full list of promos.
 * TODO add status
 *
 * @return Object
 *   Array of promo nodes.
 */
function kidneys_misc_list_promos() {
  $promos = &drupal_static(__FUNCTION__);
  if(empty($promos)) {
    $query = db_select('node', 'n');
    $query->innerjoin('field_data_field_promo_include_paths', 'p', 'p.entity_id = n.nid');
    $query->leftjoin('field_data_field_promo_button', 'bu', 'bu.entity_id = n.nid');
    $query->leftjoin('field_data_field_promo_block', 'bl', 'bl.entity_id = n.nid');
    $query->leftjoin('field_data_field_promo_band', 'ba', 'ba.entity_id = n.nid');
    $query->leftjoin('field_data_field_promo_hero', 'he', 'he.entity_id = n.nid');
    $query->leftjoin('field_data_field_promo_modal', 'mo', 'mo.entity_id = n.nid');
    $query->isNotNull('p.field_promo_include_paths_value');
    $query->addField('n', 'nid', 'nid');
    $query->addField('n', 'title', 'title');
    $query->addField('p', 'field_promo_include_paths_value', 'path');
    $query->addField('bu', 'field_promo_button_value', 'button');
    $query->addField('bl', 'field_promo_block_value', 'block');
    $query->addField('ba', 'field_promo_band_value', 'band');
    $query->addField('he', 'field_promo_hero_value', 'hero');
    $query->addField('mo', 'field_promo_modal_value', 'modal');

    $result = $query->execute();
    $promos = $result->fetchAll();
  }

  return $promos;
}

/**
 * Ajax endpoint for promo content.
 *
 * @return
 *   .
 */
function kidneys_misc_promotion_generator() {
  // Display is really just the Promo node field.
  $display = !empty($_GET['display']) ? $_GET['display'] : '';
  // Cookie-based tax ids to search.
  $query = !empty($_GET['query']) ? $_GET['query'] : '';
  $query = drupal_json_decode($query);
  // Page making the ajax call.
  $calling_q = !empty($_GET['calling_q']) ? $_GET['calling_q'] : '';

  // Node we're looking for.
  $node = NULL;

  // See if the current path matches any promos directly.
  $path_promos = kidneys_misc_list_promos();
  $path = drupal_strtolower(drupal_get_path_alias($_GET['calling_q']));
  foreach($path_promos as $p) {
    // If we have a pattern match and an approriate display.
    if (drupal_match_path($path, drupal_strtolower($p->path)) && !empty($p->{$display})) {
      $node = node_load($p->nid);
      break;
    }
  }

  // If we haven't already found our promo based on path look some more.
  if (!$node) {
    // Priorities geolocation search.
    $geo = kidneys_misc_get_geo_from_ip($_SERVER['REMOTE_ADDR']);
    if (!empty($geo['latitude']) && !empty($geo['longitude']) && $event = kidneys_misc_get_proximate_promo_events($geo['latitude'], $geo['longitude'], $display)) {
      $node = node_load($event->nid);
    } else {
      // Now try fuzzy solr search.
      // List of tax ids.
      $keys = implode(' ', array_keys($query));
      // Add "default" to keys so we can add to title of promos for results.
      $keys .= ' default';
      $query = search_api_query('default_node_index', array('conjunction'=>'OR'));
      $query->condition('type', 'promotion', '=');
      $query->condition('field_promo_' . $display . ':value', NULL, '<>');
      $query->fields(array('title','field_base_category_index'));
      $query->keys($keys);
      $results = $query->execute();

      if (!empty($results['results'])) {
        $results = $results['results'];
        $first = reset($results);
        $node = node_load($first['id']);
      }
    }
  }
  if ($node) {
    // Set up element for Google analytics tracking.
    $output = '<div data-id="' . $node->nid . '" data-promo-path="' . $path . '" data-promo-name="' . drupal_strtolower($node->title) . '">';
    $field = field_view_field('node', $node, 'field_promo_' . $display, array('label'=> 'hidden'));
    $field =  render($field);
    $output .= $field;
    $output .= '</div>';
  } else {
    $output = '<div></div>';
  }

  $commands[] = ajax_command_replace('#promotion--' . $display . ' > *', $output);
  $commands[] = ajax_command_invoke('#promotion--' . $display . ' > *', 'hide');
  $commands[] = ajax_command_invoke('#promotion--' . $display . ' > *', 'fadeIn', array('slow'));
  $page = array('#type' => 'ajax', '#commands' => $commands);

  return $page;
}

/**
 * Implements hook_page_alter().
 */
function kidneys_misc_page_alter($page) {
  // Add setting for ajax requests.
  drupal_add_js(
    array(
      'calling_q' => drupal_strtolower($_GET['q']),
    ),
    'setting'
  );
  $node = menu_get_object();
  // Add category info for nodes.
  if ($node) {
    $category_index = kidneys_misc_get_first_field_value($node, 'field_base_category_index');
    $categories = explode(' ', trim($category_index));
    $category_new = array();
    foreach($categories as $category) {
      $category = str_replace('<<', '', $category);
      $category = str_replace('>>', '', $category);
      if (empty($category_new[$category])) {
        $category_new[$category] = 1;
      } else {
        $category_new[$category] = $category_new[$category] + 1;
      }
    }
    if ($category_index) {
      drupal_add_js(
        array(
          'kidneys_categories' => drupal_json_encode($category_new),
          'kidneys_categories_processed' => FALSE,
        ),
        'setting'
      );
    }
  }

  // add Adroll tracking pixel.
  if (variable_get('nkf_adroll_endabled', 0)) {
    kidneys_misc_add_adroll_pixel();
  }
}

function kidneys_misc_add_adroll_pixel() {
  $adv_id = variable_get('nkf_adroll_adv_id', 'TEST');
  $pix_id = variable_get('nkf_adroll_pix_id', 'TEST');
  $path = drupal_get_path('module', 'kidneys_misc');
  drupal_add_js('adroll_adv_id = "' . $adv_id . '";adroll_pix_id = "' . $pix_id . '";', array(
    'type' => 'inline',
    'scope' => 'footer',
    'weight' => 5,
  ));
  drupal_add_js($path . '/kidneys_misc_adroll.js', array(
    'type' => 'file',
    'scope' => 'footer',
    'weight' => 6,
  ));

}

function kidneys_misc_get_category_tid_values($node) {
  $return = '';
  if (isset($node->field_base_category)) {
    $multiple = 3;
    foreach ($node->field_base_category[LANGUAGE_NONE] as $i => $value) {
      $return .= str_repeat('<<' . $value['tid'] . '>> ', ($i >= $multiple) ? 1 : $multiple - $i);
    }
  }
  return $return;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function kidneys_misc_block_info() {
  $blocks['kidneys_misc_content_actions_top'] = array(
    'info' => t('Content Actions Top'),
  );
  $blocks['kidneys_misc_pardot_progressive'] = array(
    'info' => t('Pardot Progressive Modal Form'),
  );
  $blocks['kidneys_misc_proximate_events'] = array(
    'info' => t('Nearby Events'),
  );
  $blocks['kidneys_misc_proximate_office'] = array(
    'info' => t('Closest Office'),
  );
  $blocks['kidneys_misc_promo_block'] = array(
    'info' => t('NKF Promo - Block'),
  );
  $blocks['kidneys_misc_promo_button'] = array(
    'info' => t('NKF Promo - Button'),
  );
  $blocks['kidneys_misc_promo_band'] = array(
    'info' => t('NKF Promo - Band'),
  );
  $blocks['kidneys_misc_promo_banner'] = array(
    'info' => t('NKF Promo - Banner'),
  );
  $blocks['kidneys_misc_promo_hero'] = array(
    'info' => t('NKF Promo - hero'),
  );
  $blocks['kidneys_misc_promo_modal'] = array(
    'info' => t('NKF Promo - modal'),
  );
  return $blocks;
}

/**
 * Implements hook_init().

 */
 function kidneys_misc_init() {
   drupal_add_library('system', 'jquery.cookie');
   $path = drupal_get_path('module', 'kidneys_misc');
   drupal_add_js($path . '/kidneys_misc.js');

   $magnificpath = libraries_get_path('magnific_popup');
   if ($magnificpath) {
     drupal_add_js($magnificpath . '/dist/jquery.magnific-popup.js');
     drupal_add_css($magnificpath . '/dist/magnific-popup.css');
   }

 }
/**
 * Implements hook_block_view().
 */
function kidneys_misc_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'kidneys_misc_pardot_progressive':
      $block['subject'] = 'Newsletter Sign Up';
      $block['content'] = kidneys_misc_get_pardot();
    break;
    case 'kidneys_misc_proximate_events':
      $block['subject'] = 'Nearby Events';
      $block['content'] = kidneys_misc_proximate_events();
    break;
    case 'kidneys_misc_proximate_office':
      $block['subject'] = 'Closest Office';
      $block['content'] = kidneys_misc_proximate_office();
    break;
    case 'kidneys_misc_content_actions_top':
      $block['subject'] = '';
      $block['content'] = kidneys_misc_get_content_actions_top_markup();
    break;
    case 'kidneys_misc_promo_block':
      drupal_add_library('system', 'jquery.cookie');
      drupal_add_library('system', 'drupal.ajax');
      $block['subject'] = '';
      $block['content'] = '<div id="promotion--block" data-promo="block" class="promotion">
        <div class="animate--shimmer padding--xl bg--gray-1 text-align--center">
          <div class="padding-sm width--70 height--xxs margin-y--xs bg--gray-2 center"></div>
          <div class="padding-sm width--40 height--xxs margin-y--xs bg--gray-2 center"></div>
          <div class="padding-sm width--60 height--xxs margin-y--xs bg--gray-2 center"></div>
          <div class="button--gray-2 margin-y--lg color--gray-2 padding-y--md width--50 center"></div>
        </div>
      </div>';
    break;
    case 'kidneys_misc_promo_button':
      drupal_add_library('system', 'jquery.cookie');
      drupal_add_library('system', 'drupal.ajax');

      $block['subject'] = '';
      $block['content'] = '<div id="promotion--button" data-promo="button" class="promotion">
        <div class="button opacity--10 bg--black animate--shimmer padding-y--md width--md"></div>
      </div>';
    break;
    case 'kidneys_misc_promo_band':
      drupal_add_library('system', 'jquery.cookie');
      drupal_add_library('system', 'drupal.ajax');

      $block['subject'] = '';
      $block['content'] = '<div id="promotion--band" data-promo="band" class="promotion">
        <div class="animate--shimmer padding--md width--100"></div>
      </div>';
    break;
    case 'kidneys_misc_promo_hero':
      drupal_add_library('system', 'jquery.cookie');
      drupal_add_library('system', 'drupal.ajax');

      $block['subject'] = '';
      $block['content'] = '<div id="promotion--hero" data-promo="hero" class="promotion">
        <div class="animate--shimmer padding--xl bg--gray-1 text-align--center">
          <div class="padding-sm width--70 height--xxs margin-y--xs bg--gray-2 center"></div>
          <div class="padding-sm width--40 height--xxs margin-y--xs bg--gray-2 center"></div>
          <div class="padding-sm width--60 height--xxs margin-y--xs bg--gray-2 center"></div>
          <div class="button--gray-2 margin-y--lg color--gray-2 padding-y--md width--50 center"></div>
        </div>
      </div>';
    break;
    case 'kidneys_misc_promo_banner':
      drupal_add_library('system', 'jquery.cookie');
      drupal_add_library('system', 'drupal.ajax');

      $block['subject'] = '';
      $block['content'] = '<div id="promotion--banner" data-promo="hero" class="promotion">
        <div class="animate--shimmer padding--xl bg--gray-1 text-align--center">
          <div class="padding-sm width--70 height--xxs margin-y--xs bg--gray-2 center"></div>
          <div class="padding-sm width--40 height--xxs margin-y--xs bg--gray-2 center"></div>
          <div class="padding-sm width--60 height--xxs margin-y--xs bg--gray-2 center"></div>
          <div class="button--gray-2 margin-y--lg color--gray-2 padding-y--md width--50 center"></div>
        </div>
      </div>';
    break;
    case 'kidneys_misc_promo_modal':
      drupal_add_library('system', 'jquery.cookie');
      drupal_add_library('system', 'drupal.ajax');

      $block['subject'] = '';
      $block['content'] = '<div id="promotion--modal" data-promo="modal" class="promotion">
        <div class="animate--shimmer padding--xl bg--gray-1 text-align--center">
          <div class="padding-sm width--70 height--xxs margin-y--xs bg--gray-2 center"></div>
          <div class="padding-sm width--40 height--xxs margin-y--xs bg--gray-2 center"></div>
          <div class="padding-sm width--60 height--xxs margin-y--xs bg--gray-2 center"></div>
          <div class="button--gray-2 margin-y--lg color--gray-2 padding-y--md width--50 center"></div>
        </div>
      </div>';
    break;

  }
  return $block;
}
// Block content callback for pardot signup form.
// TODO update pardot url.
function kidneys_misc_get_pardot() {
  $path = drupal_get_path('module', 'kidneys_misc');
  drupal_add_js($path . '/kidneys_misc_pardot.js');
  // add pop js/class
  $magnificpath = libraries_get_path('magnific_popup');
  drupal_add_js($magnificpath . '/dist/jquery.magnific-popup.js');
  drupal_add_css($magnificpath . '/dist/magnific-popup.css');
  $markup = '<div class="pardot-email">';
  $markup .= '<iframe src="https://go.pardot.com/l/219342/2016-08-31/77f" width="100%" type="text/html" frameborder="0" allowTransparency="true" style="border: 0"></iframe>';
  $markup .= "</div>";
  $markup .= '<div id="pardot-progressive" class="white-popup mfp-hide" style="position:relative;background:white; padding:25px;width:auto;max-width:400px;margin:0 auto">';
  $markup .= "</div>";
  return $markup;
}

// Block content callback for closest events.
function kidneys_misc_proximate_events() {
  $geo = kidneys_misc_get_geo_from_ip($_SERVER['REMOTE_ADDR']);
  if (!empty($geo['latitude']) && !empty($geo['longitude']) && $event = kidneys_misc_get_proximate_events($geo['latitude'], $geo['longitude'], $display)) {
    $node = node_load($event->nid);
  }
}

function kidneys_misc_get_proximate_events($lat, $lon, $field, $dis = 50, $days = 45) {
  $results = db_query(
    'SELECT
      n.nid,  (
        3959 * acos (
          cos ( radians(:lat) )
          * cos( radians( g.field_base_geofield_lat ) )
          * cos( radians( g.field_base_geofield_lon ) - radians(:lon) )
          + sin ( radians(:lat) )
          * sin( radians( g.field_base_geofield_lat ) )
        )
      ) AS distance
    FROM {node} n
      INNER JOIN {field_data_field_base_geofield} g on g.entity_id = n.nid
      INNER JOIN {field_data_field_base_date_time} d on d.entity_id = n.nid

    WHERE
      n.type = :type
      AND d.field_base_date_time_value >= NOW()
      AND d.field_base_date_time_value <= DATE_ADD(CURRENT_TIMESTAMP, INTERVAL :days day)
    HAVING distance <= :dis
    ORDER BY distance
    LIMIT 0 , 5', array(':type'=> 'event', ':lat' => $lat, ':lon' => $lon, ':dis' => $dis, ':days' => $days )
  );
  if ($results->rowCount() > 0) {
    return $results->fetchObject();
  } else {
    return FALSE;
  }
}

/**
  * hook_search_api_solr_query_alter().
  */
function kidneys_misc_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {
  // Check to see if we search is for promos and if add boost to the query.
  if ($call_args['params']['fq'][0] == 'ss_type:"promotion"') {
    // This request should have come in via ajax.
    // We want to grab appropriate URL params.
    $query = !empty($_GET['query']) ? $_GET['query'] : '';
    $query = drupal_json_decode($query);
    foreach ($query as $k => $v) {
      $call_args['params']['bq'][] = $k . '^' . $v;
    }

  }
  // Boost exact matches for search boost fields.
  // This allows us to up the relevance of select nodes useing
  // the search_boost_term field.
  if (isset($query) && is_object($query) && method_exists($query, 'getKeys')) {
    $keys = $query->getKeys();
  	unset($keys['#conjunction']);
    // Boost multiple words.
    $len  = count($keys);
    for ($i = 0; $i < $len; $i++){
      $call_args['params']['bq'][] = 'tm_field_search_boost_term:"' . $keys[$i] . '"^10';
      if (isset($keys[$i+1])) {
        $call_args['params']['bq'][] = 'tm_field_search_boost_term:"' . $keys[$i] . ' ' . $keys[$i+1] . '"^15';
      }
      if (isset($keys[$i+2])) {
        $call_args['params']['bq'][] = 'tm_field_search_boost_term:"' . $keys[$i] . ' ' . $keys[$i+1] . ' ' . $keys[$i+2]. '"^20';
      }
    }
  }
}

function kidneys_misc_get_content_actions() {
  $node = menu_get_object();
  if (!$node || !isset($node->nid)) {
    return '';
  }
  $actions = array();
  $title = rawurlencode($node->title);
  //$teaser = field_view_field('node', $node, 'body', array(
  //    'label'=> 'hidden',
  //    'type' => 'text_summary_or_trimmed',
  //    'settings'=> array('trim_length' => 200),
  //  ));
  //$teaser = rawurlencode(strip_tags(render($teaser), '<p><a>'));
  $base_path = url(base_path(), ['absolute' => TRUE]);
  $path = $base_path . '/' . drupal_get_path_alias('node/' . $node->nid);
  // Shared from National Kidney Foundation.
  // Read more
  // National Kidney Foundation
  $teaser = '<p>Here is an article from National Kidney Foundation you might be interested in:</p>';
  // add UTMs
  //$teaser .= '<p><a href="' . $path . '">' . $title . '</a></p>';
  $teaser .= '<p>'. $path . '</p>';
  $teaser = rawurlencode($teaser);
  if ($twitter = field_get_items('node', $node, 'field_action_tweet')) {
    if ($twitter[0]['value']) {
      $actions['twitter'] = array(
        'icon' => 'icon-twitter',
        'button' => 'button--twitter',
        'href' => kidneys_misc_get_tweet_intent($node),
        'markup' => '<a data-track="social" data-network="twitter" data-action="share" data-target="'.urlencode($path).'" href="' . kidneys_misc_get_tweet_intent($node) . '" class="caps button--twitter js--share-link"><i class="icon-twitter"></i> <span class="display--none sm--display--inline">Tweet</span></a>'
      );
    }
  }
  if ($facebook = field_get_items('node', $node, 'field_action_facebook')) {
    if ($facebook[0]['value']) {
      $actions['facebook'] = array(
        'icon' => 'icon-facebook',
        'button' => 'button--facebook',
        'href' => 'https://www.facebook.com/sharer/sharer.php?u=' . urlencode($path),
        'markup' => '<a data-track="social" data-network="facebook" data-action="share" data-target="'.urlencode($path).'" href="https://www.facebook.com/sharer/sharer.php?u=' . urlencode($path) . '" class="caps button--facebook js--share-link"><i class="icon-facebook"></i> <span class="display--none sm--display--inline">Share</span></a>'
      );
    }
  }
  if ($pinterest = field_get_items('node', $node, 'field_action_pinterest')) {
    if ($pinterest[0]['value']) {
      $actions['pinterest'] = array(
        'icon' => 'icon-pinterest',
        'button' => 'button--pinterest',
        'href' => 'http://pinterest.com/pin/create/button/?url=' . urlencode($path),
        'markup' => '<a data-track="social" data-network="pinterest" data-action="share" data-target="'.urlencode($path).'" href="http://pinterest.com/pin/create/button/?url=' . urlencode($path) . '&description='.$title.'" class="caps button--pinterest js--share-link"><i class="icon-pinterest"></i> <span class="display--none sm--display--inline">Pin</span></a>'
      );
    }
  }
  if ($linkedin = field_get_items('node', $node, 'field_action_linkedin')) {
    if ($linkedin[0]['value']) {
      $actions['linkedin'] = array(
        'icon' => 'icon-linkedin',
        'button' => 'button--linkedin',
        'href' => kidneys_misc_get_linkedin_share($node),
        'markup' => '<a data-track="social" data-network="linkedin" data-action="share" data-target="'.urlencode($path).'" href="' . kidneys_misc_get_linkedin_share($node) . '" class="caps button--linkedin js--share-link"><i class="icon-linkedin"></i> <span class="display--none sm--display--inline">Share</span></a>'
      );
    }
  }
  if ($print = field_get_items('node', $node, 'field_action_print')) {
    if ($print[0]['value']) {
      $actions['print'] = array(
        'icon' => 'icon-print',
        'button' => 'button--gray-4',
        'href' => '#',
        'markup' => '<a data-track="event" data-category="cta" data-action="print" data-label="'.urlencode($path).'" href="#" class="caps button--gray-4 js--print-link"><i class="icon-print"></i> <span class="display--none sm--display--inline">Print</span></a>'
      );
    }
  }
  if ($email = field_get_items('node', $node, 'field_action_email')) {
    if ($email[0]['value']) {
      //module_load_include('inc', 'print_mail', 'print_mail');
      //$email_form = drupal_render(drupal_get_form('print_mail_form'));
      $actions['email'] = array(
        'icon' => 'icon-mail-alt',
        'button' => 'button--gray-4',
        'href' => 'mailto:?subject=Shared%20from%20National%20Kidney%20Foundation&body=' . $teaser,
        'markup' => '<a data-track="event" data-category="cta" data-action="email" data-label="'.urlencode($path).'" href="mailto:?subject=Shared%20from%20National%20Kidney%20Foundation&body=' . $teaser . '" class="caps button--gray-4"><i class="icon-mail-alt"></i> <span class="display--none sm--display--inline">Email</span></a>'
        //'markup' => '<a href="/printmail/' . $node->nid . '" class="caps button--gray-4"><i class="icon-mail-alt"></i> Email</a>'
        //'markup' => '<a href="#email" class="modal-trigger caps button--gray-4"><i class="icon-mail-alt"></i> Email</a>
        //  <div id="email" class="modal padding--xl bg--white border-radius--md max-width--xxl center mfp-hide">'.$email_form.'</div>'
      );
    }
  }
  return $actions;
}

function kidneys_misc_get_tweet_intent($node) {
  $text = kidneys_misc_get_first_field_value($node, 'field_tweet_text');
  $via = kidneys_misc_get_first_field_value($node, 'field_tweet_via');
  $hashtags = kidneys_misc_get_first_field_value($node, 'field_tweet_hashtag');
  $url = kidneys_misc_get_first_field_value($node, 'field_url_hash');
  $tweet = 'https://twitter.com/intent/tweet';
  $query['text'] = ($text) ? $text : $node->title;
  // Url hash is broken, TODO: fix it.
  // This is just a work around to force the nid for twitter.
  if ($url && FALSE) {
    $query['url'] = 'http://nkf.li/' . $url;
  } else {
    $base_path = url(base_path(), ['absolute' => TRUE]);
    $path = $base_path . '/' . drupal_get_path_alias('node/' . $node->nid);
    $query['url'] = $path;
  }
  if ($via) {
    $query['via'] = $via;
  }
  if ($hashtags) {
    $query['hashtags'] = $hashtags;
  }
  return url($tweet, array('query' => $query));
}
function kidneys_misc_get_linkedin_share($node) {
  $share = 'http://www.linkedin.com/shareArticle';
  $teaser = field_view_field('node', $node, 'body', array(
    'label'=> 'hidden',
    'type' => 'text_summary_or_trimmed',
    'settings'=> array('trim_length' =>150),
  ));
  $teaser = strip_tags(render($teaser));
  $query['mini'] = 'true';
  $query['title'] = $node->title;
  $query['summary'] = $teaser;
  $query['url'] = $base_path . '/' . drupal_get_path_alias('node/' . $node->nid);
  $query['source'] = url(base_path(), ['absolute' => TRUE]);

  return url($share, array('query' => $query));
}

function kidneys_misc_get_facebook_share($node) {

}
function kidneys_misc_get_pinterest_share($node) {

}

function kidneys_misc_get_first_field_value($node, $field) {
  $field_items = field_get_items('node', $node, $field);
  if ($field_items) {
    $field_first_item = reset($field_items);
    $field_value = $field_first_item['value'];
    return $field_value;
  }
  return FALSE;
}


function kidneys_misc_get_content_actions_top_markup() {
  $markup = '';
  $actions = kidneys_misc_get_content_actions();
  if (!empty($actions)) {
    $markup = '<div class="sm--display--inline-block padding-y--md grid print--hide sm--font-size--sm">';
    foreach ($actions as $key => $value) {
      $markup .= '<div class="grid-cell padding-right--xs padding-bottom--xs">';
      $markup .= $value['markup'];
      $markup .= '</div>';
    }
    $markup .= '</div>';
  }
  return $markup;
}



/**
 * Returns an empty page with javascript that closes the current window.
 * Used as the redirect page for facebook shares that require a redirect uri.
 * Allows us to close the share popup window when the user has finished sharing.
 */
function kidneys_misc_share_redirect() {
  return "<script>(function(){ window.close(); })();</script>";
}

function kidneys_misc_create_redirect($s, $r) {
  if (module_exists('redirect')) {

    $redirect = new stdClass();
    redirect_object_prepare($redirect);
    $redirect->source = $s;
    $redirect->redirect = $r;

    // Check if the redirect exists before saving.
    $hash = redirect_hash($redirect);
    $existing = redirect_load_by_hash($hash);
    if (!$existing) {
      redirect_save($redirect);
    }

  }
}

function kidneys_misc_generate_hash($length = 7) {
  if (module_exists('redirect')) {
    do {
      $hash = user_password($length);
    } while (redirect_load_by_source($hash) !== FALSE);

    return $hash;
  }
  return FALSE;

}
